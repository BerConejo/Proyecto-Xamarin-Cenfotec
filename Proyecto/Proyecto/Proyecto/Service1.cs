//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ACCESODATOS
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="clsPrograma", Namespace="http://schemas.datacontract.org/2004/07/ACCESODATOS")]
    public partial class clsPrograma : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CODPROGRAMAField;
        
        private string NOMBREPROGRAMAField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CODPROGRAMA
        {
            get
            {
                return this.CODPROGRAMAField;
            }
            set
            {
                this.CODPROGRAMAField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NOMBREPROGRAMA
        {
            get
            {
                return this.NOMBREPROGRAMAField;
            }
            set
            {
                this.NOMBREPROGRAMAField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="clsCombos", Namespace="http://schemas.datacontract.org/2004/07/ACCESODATOS")]
    public partial class clsCombos : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DESCRIPCIONField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DESCRIPCION
        {
            get
            {
                return this.DESCRIPCIONField;
            }
            set
            {
                this.DESCRIPCIONField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IService1")]
public interface IService1
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validarUsuario", ReplyAction="http://tempuri.org/IService1/validarUsuarioResponse")]
    string validarUsuario(string pStrUsuario, string pStrCodigo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validarUsuario", ReplyAction="http://tempuri.org/IService1/validarUsuarioResponse")]
    System.Threading.Tasks.Task<string> validarUsuarioAsync(string pStrUsuario, string pStrCodigo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/obtenerOrden", ReplyAction="http://tempuri.org/IService1/obtenerOrdenResponse")]
    string obtenerOrden(string pStrOrden);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/obtenerOrden", ReplyAction="http://tempuri.org/IService1/obtenerOrdenResponse")]
    System.Threading.Tasks.Task<string> obtenerOrdenAsync(string pStrOrden);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertOrden", ReplyAction="http://tempuri.org/IService1/insertOrdenResponse")]
    bool insertOrden(string pStrOrden, System.DateTime pDateFchOrden, string pStrCodCliente, string pStrTipoDoc, string pStrAsunto, string pStrTipoRecep, string pStrTipoServicio, string pStrTipoOrden, string pStrSistema, string pStrTipoAjuste, string pStrAsigna, string pStrTiempoLimite, string pStrNoOrdClie, string pStrChequeado);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertOrden", ReplyAction="http://tempuri.org/IService1/insertOrdenResponse")]
    System.Threading.Tasks.Task<bool> insertOrdenAsync(string pStrOrden, System.DateTime pDateFchOrden, string pStrCodCliente, string pStrTipoDoc, string pStrAsunto, string pStrTipoRecep, string pStrTipoServicio, string pStrTipoOrden, string pStrSistema, string pStrTipoAjuste, string pStrAsigna, string pStrTiempoLimite, string pStrNoOrdClie, string pStrChequeado);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/borrarOrden", ReplyAction="http://tempuri.org/IService1/borrarOrdenResponse")]
    bool borrarOrden(string pStrOrden);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/borrarOrden", ReplyAction="http://tempuri.org/IService1/borrarOrdenResponse")]
    System.Threading.Tasks.Task<bool> borrarOrdenAsync(string pStrOrden);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertSeguimiento", ReplyAction="http://tempuri.org/IService1/insertSeguimientoResponse")]
    bool insertSeguimiento(
                string pStrNumDocum, 
                string pStrRegistro, 
                string pStrArchivo, 
                string pStrCodEmp, 
                System.DateTime pDateHoraIni, 
                System.DateTime pDateHoraFin, 
                string pStrAsist, 
                string pStrComent, 
                string pStrCarpetaTrabajo, 
                string pStrArchivosModifi, 
                string pStrArchivosModiBD, 
                string pStrVersion, 
                string pStrEstado, 
                string pStrNumBoleta, 
                System.DateTime pDateFecha, 
                string pStrCliRepre);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertSeguimiento", ReplyAction="http://tempuri.org/IService1/insertSeguimientoResponse")]
    System.Threading.Tasks.Task<bool> insertSeguimientoAsync(
                string pStrNumDocum, 
                string pStrRegistro, 
                string pStrArchivo, 
                string pStrCodEmp, 
                System.DateTime pDateHoraIni, 
                System.DateTime pDateHoraFin, 
                string pStrAsist, 
                string pStrComent, 
                string pStrCarpetaTrabajo, 
                string pStrArchivosModifi, 
                string pStrArchivosModiBD, 
                string pStrVersion, 
                string pStrEstado, 
                string pStrNumBoleta, 
                System.DateTime pDateFecha, 
                string pStrCliRepre);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/findAll", ReplyAction="http://tempuri.org/IService1/findAllResponse")]
    ACCESODATOS.clsPrograma[] findAll();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/findAll", ReplyAction="http://tempuri.org/IService1/findAllResponse")]
    System.Threading.Tasks.Task<ACCESODATOS.clsPrograma[]> findAllAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/findByPrimary", ReplyAction="http://tempuri.org/IService1/findByPrimaryResponse")]
    ACCESODATOS.clsCombos[] findByPrimary(string pStrIdGeneral, string pStrEspecifico);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/findByPrimary", ReplyAction="http://tempuri.org/IService1/findByPrimaryResponse")]
    System.Threading.Tasks.Task<ACCESODATOS.clsCombos[]> findByPrimaryAsync(string pStrIdGeneral, string pStrEspecifico);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IService1Channel : IService1, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class Service1Client : System.ServiceModel.ClientBase<IService1>, IService1
{
    
    public Service1Client()
    {
    }
    
    public Service1Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public Service1Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string validarUsuario(string pStrUsuario, string pStrCodigo)
    {
        return base.Channel.validarUsuario(pStrUsuario, pStrCodigo);
    }
    
    public System.Threading.Tasks.Task<string> validarUsuarioAsync(string pStrUsuario, string pStrCodigo)
    {
        return base.Channel.validarUsuarioAsync(pStrUsuario, pStrCodigo);
    }
    
    public string obtenerOrden(string pStrOrden)
    {
        return base.Channel.obtenerOrden(pStrOrden);
    }
    
    public System.Threading.Tasks.Task<string> obtenerOrdenAsync(string pStrOrden)
    {
        return base.Channel.obtenerOrdenAsync(pStrOrden);
    }
    
    public bool insertOrden(string pStrOrden, System.DateTime pDateFchOrden, string pStrCodCliente, string pStrTipoDoc, string pStrAsunto, string pStrTipoRecep, string pStrTipoServicio, string pStrTipoOrden, string pStrSistema, string pStrTipoAjuste, string pStrAsigna, string pStrTiempoLimite, string pStrNoOrdClie, string pStrChequeado)
    {
        return base.Channel.insertOrden(pStrOrden, pDateFchOrden, pStrCodCliente, pStrTipoDoc, pStrAsunto, pStrTipoRecep, pStrTipoServicio, pStrTipoOrden, pStrSistema, pStrTipoAjuste, pStrAsigna, pStrTiempoLimite, pStrNoOrdClie, pStrChequeado);
    }
    
    public System.Threading.Tasks.Task<bool> insertOrdenAsync(string pStrOrden, System.DateTime pDateFchOrden, string pStrCodCliente, string pStrTipoDoc, string pStrAsunto, string pStrTipoRecep, string pStrTipoServicio, string pStrTipoOrden, string pStrSistema, string pStrTipoAjuste, string pStrAsigna, string pStrTiempoLimite, string pStrNoOrdClie, string pStrChequeado)
    {
        return base.Channel.insertOrdenAsync(pStrOrden, pDateFchOrden, pStrCodCliente, pStrTipoDoc, pStrAsunto, pStrTipoRecep, pStrTipoServicio, pStrTipoOrden, pStrSistema, pStrTipoAjuste, pStrAsigna, pStrTiempoLimite, pStrNoOrdClie, pStrChequeado);
    }
    
    public bool borrarOrden(string pStrOrden)
    {
        return base.Channel.borrarOrden(pStrOrden);
    }
    
    public System.Threading.Tasks.Task<bool> borrarOrdenAsync(string pStrOrden)
    {
        return base.Channel.borrarOrdenAsync(pStrOrden);
    }
    
    public bool insertSeguimiento(
                string pStrNumDocum, 
                string pStrRegistro, 
                string pStrArchivo, 
                string pStrCodEmp, 
                System.DateTime pDateHoraIni, 
                System.DateTime pDateHoraFin, 
                string pStrAsist, 
                string pStrComent, 
                string pStrCarpetaTrabajo, 
                string pStrArchivosModifi, 
                string pStrArchivosModiBD, 
                string pStrVersion, 
                string pStrEstado, 
                string pStrNumBoleta, 
                System.DateTime pDateFecha, 
                string pStrCliRepre)
    {
        return base.Channel.insertSeguimiento(pStrNumDocum, pStrRegistro, pStrArchivo, pStrCodEmp, pDateHoraIni, pDateHoraFin, pStrAsist, pStrComent, pStrCarpetaTrabajo, pStrArchivosModifi, pStrArchivosModiBD, pStrVersion, pStrEstado, pStrNumBoleta, pDateFecha, pStrCliRepre);
    }
    
    public System.Threading.Tasks.Task<bool> insertSeguimientoAsync(
                string pStrNumDocum, 
                string pStrRegistro, 
                string pStrArchivo, 
                string pStrCodEmp, 
                System.DateTime pDateHoraIni, 
                System.DateTime pDateHoraFin, 
                string pStrAsist, 
                string pStrComent, 
                string pStrCarpetaTrabajo, 
                string pStrArchivosModifi, 
                string pStrArchivosModiBD, 
                string pStrVersion, 
                string pStrEstado, 
                string pStrNumBoleta, 
                System.DateTime pDateFecha, 
                string pStrCliRepre)
    {
        return base.Channel.insertSeguimientoAsync(pStrNumDocum, pStrRegistro, pStrArchivo, pStrCodEmp, pDateHoraIni, pDateHoraFin, pStrAsist, pStrComent, pStrCarpetaTrabajo, pStrArchivosModifi, pStrArchivosModiBD, pStrVersion, pStrEstado, pStrNumBoleta, pDateFecha, pStrCliRepre);
    }
    
    public ACCESODATOS.clsPrograma[] findAll()
    {
        return base.Channel.findAll();
    }
    
    public System.Threading.Tasks.Task<ACCESODATOS.clsPrograma[]> findAllAsync()
    {
        return base.Channel.findAllAsync();
    }
    
    public ACCESODATOS.clsCombos[] findByPrimary(string pStrIdGeneral, string pStrEspecifico)
    {
        return base.Channel.findByPrimary(pStrIdGeneral, pStrEspecifico);
    }
    
    public System.Threading.Tasks.Task<ACCESODATOS.clsCombos[]> findByPrimaryAsync(string pStrIdGeneral, string pStrEspecifico)
    {
        return base.Channel.findByPrimaryAsync(pStrIdGeneral, pStrEspecifico);
    }
}
